# (without the constant)
prob <- function(y,win){
if(y < 0 || y >= 0.5)
return(0)
return( (1/3)^win[1] *
((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] *
((2*y)/3)^win[4] * (y/3)^win[5] )
}
u <- runif(m) # for accept/reject step
X = as.matrix(numeric(4*m),ncol=4)
reject.rates = numeric(4)
mean.xb = numeric(4)
w = c(0.01,0.05,0.1,0.25)
for(p in 1:4){
set.seed(2023)
w = w[p]
k <- 0
v <- runif(m,-w,w) # proposal distribution
x[1] <- 0.25
for(i in 2:m){
y <- x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)){ # accept
x[i] <- y}
else{
x[i] <- x[i-1] # reject
k <- k+1
}
}
X[,p] = x
xb <- x[-(1:burn)]
reject.rates[p] = k/m
mean.xb[p] = mean(xb)
}
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
v
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
w
set.seed(2023)
b <- 0.2 # actual value of beta
m <- 5000 # length of the chain
burn <- 1000 # burn-in time
days <- 250
x <- numeric(m) # the chain
# generate the observed frequencies of winners
i <- sample(1:5,size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win <- tabulate(i)
# the following function prob computes the target density
# (without the constant)
prob <- function(y,win){
if(y < 0 || y >= 0.5)
return(0)
return( (1/3)^win[1] *
((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] *
((2*y)/3)^win[4] * (y/3)^win[5] )
}
u <- runif(m) # for accept/reject step
X = as.matrix(numeric(4*m),ncol=4)
reject.rates = numeric(4)
mean.xb = numeric(4)
ws = c(0.01,0.05,0.1,0.25)
for(p in 1:4){
set.seed(2023)
w = ws[p]
k <- 0
v <- runif(m,-w,w) # proposal distribution
x[1] <- 0.25
for(i in 2:m){
y <- x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)){ # accept
x[i] <- y}
else{
x[i] <- x[i-1] # reject
k <- k+1
}
}
X[,p] = x
xb <- x[-(1:burn)]
reject.rates[p] = k/m
mean.xb[p] = mean(xb)
}
source("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
set.seed(2023)
b <- 0.2 # actual value of beta
m <- 5000 # length of the chain
burn <- 1000 # burn-in time
days <- 250
x <- numeric(m) # the chain
# generate the observed frequencies of winners
i <- sample(1:5,size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win <- tabulate(i)
# the following function prob computes the target density
# (without the constant)
prob <- function(y,win){
if(y < 0 || y >= 0.5)
return(0)
return( (1/3)^win[1] *
((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] *
((2*y)/3)^win[4] * (y/3)^win[5] )
}
u <- runif(m) # for accept/reject step
X = as.matrix(numeric(4*m),ncol=4)
reject.rates = numeric(4)
mean.xb = numeric(4)
ws = c(0.01,0.05,0.1,0.25)
for(p in 1:4){
set.seed(2023)
w = ws[p]
k <- 0
v <- runif(m,-w,w) # proposal distribution
x[1] <- 0.25
for(i in 2:m){
y <- x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)){ # accept
x[i] <- y}
else{
x[i] <- x[i-1] # reject
k <- k+1
}
}
X[,p] = x
xb <- x[-(1:burn)]
reject.rates[p] = k/m
mean.xb[p] = mean(xb)
}
i
u
len(u)
length(u)
length(x)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
debugSource("D:/大三上学习资料/统计计算/hw9/9.5.R", echo=TRUE)
p
X
dim(X)
set.seed(2023)
b <- 0.2 # actual value of beta
m <- 5000 # length of the chain
burn <- 1000 # burn-in time
days <- 250
x <- numeric(m) # the chain
# generate the observed frequencies of winners
i <- sample(1:5,size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win <- tabulate(i)
# the following function prob computes the target density
# (without the constant)
prob <- function(y,win){
if(y < 0 || y >= 0.5)
return(0)
return( (1/3)^win[1] *
((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] *
((2*y)/3)^win[4] * (y/3)^win[5] )
}
u <- runif(m) # for accept/reject step
X = matrix(numeric(4*m),ncol=4)
reject.rates = numeric(4)
mean.xb = numeric(4)
ws = c(0.01,0.05,0.1,0.25)
for(p in 1:4){
set.seed(2023)
w = ws[p]
k <- 0
v <- runif(m,-w,w) # proposal distribution
x[1] <- 0.25
for(i in 2:m){
y <- x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)){ # accept
x[i] <- y}
else{
x[i] <- x[i-1] # reject
k <- k+1
}
}
X[,p] = x
xb <- x[-(1:burn)]
reject.rates[p] = k/m
mean.xb[p] = mean(xb)
}
# plot the chain the histogram
par(mfrow=c(2,2))
for(p in 1:4){
x = X[,p]
plot(x,type='l')
abline(h=b,v=burn,lty=3,col='red',lwd=3)
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main='')
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
# print(k/m)
print(mean(xb))
}
set.seed(2023)
b <- 0.2 # actual value of beta
m <- 5000 # length of the chain
burn <- 1000 # burn-in time
days <- 250
x <- numeric(m) # the chain
# generate the observed frequencies of winners
i <- sample(1:5,size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win <- tabulate(i)
# the following function prob computes the target density
# (without the constant)
prob <- function(y,win){
if(y < 0 || y >= 0.5)
return(0)
return( (1/3)^win[1] *
((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] *
((2*y)/3)^win[4] * (y/3)^win[5] )
}
u <- runif(m) # for accept/reject step
X = matrix(numeric(4*m),ncol=4)
reject.rates = numeric(4)
mean.xb = numeric(4)
ws = c(0.01,0.05,0.1,0.25)
for(p in 1:4){
set.seed(2023)
w = ws[p]
k <- 0
v <- runif(m,-w,w) # proposal distribution
x[1] <- 0.25
for(i in 2:m){
y <- x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)){ # accept
x[i] <- y}
else{
x[i] <- x[i-1] # reject
k <- k+1
}
}
X[,p] = x
xb <- x[-(1:burn)]
reject.rates[p] = k/m
mean.xb[p] = mean(xb)
}
# plot the chain the histogram
par(mfrow=c(2,2))
for(p in 1:4){
x = X[,p]
plot(x,type='l')
abline(h=b,v=burn,lty=3,col='red',lwd=3)
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main='')
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
Table = as.data.frame(rbind(mean.xb,reject.rates))
Table
set.seed(2023)
b <- 0.2 # actual value of beta
m <- 5000 # length of the chain
burn <- 1000 # burn-in time
days <- 250
x <- numeric(m) # the chain
# generate the observed frequencies of winners
i <- sample(1:5,size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win <- tabulate(i)
# the following function prob computes the target density
# (without the constant)
prob <- function(y,win){
if(y < 0 || y >= 0.5)
return(0)
return( (1/3)^win[1] *
((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] *
((2*y)/3)^win[4] * (y/3)^win[5] )
}
u <- runif(m) # for accept/reject step
X = matrix(numeric(4*m),ncol=4)
reject.rates = numeric(4)
mean.xb = numeric(4)
ws = c(0.01,0.05,0.1,0.25)
for(p in 1:4){
set.seed(2023)
w = ws[p]
k <- 0
v <- runif(m,-w,w) # proposal distribution
x[1] <- 0.25
for(i in 2:m){
y <- x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)){ # accept
x[i] <- y}
else{
x[i] <- x[i-1] # reject
k <- k+1
}
}
X[,p] = x
xb <- x[-(1:burn)]
reject.rates[p] = k/m
mean.xb[p] = mean(xb)
}
# plot the chain the histogram
par(mfrow=c(2,2))
for(p in 1:4){
x = X[,p]
plot(x,type='l')
abline(h=b,v=burn,lty=3,col='red',lwd=3)
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main='')
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
Table = as.data.frame(rbind(mean.xb,reject.rates))
colnames(Table) <- ws
set.seed(2023)
b <- 0.2 # actual value of beta
m <- 5000 # length of the chain
burn <- 1000 # burn-in time
days <- 250
x <- numeric(m) # the chain
# generate the observed frequencies of winners
i <- sample(1:5,size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win <- tabulate(i)
# the following function prob computes the target density
# (without the constant)
prob <- function(y,win){
if(y < 0 || y >= 0.5)
return(0)
return( (1/3)^win[1] *
((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] *
((2*y)/3)^win[4] * (y/3)^win[5] )
}
u <- runif(m) # for accept/reject step
X = matrix(numeric(4*m),ncol=4)
reject.rates = numeric(4)
mean.xb = numeric(4)
ws = c(0.01,0.05,0.1,0.25)
for(p in 1:4){
set.seed(2023)
w = ws[p]
k <- 0
v <- runif(m,-w,w) # proposal distribution
x[1] <- 0.25
for(i in 2:m){
y <- x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)){ # accept
x[i] <- y}
else{
x[i] <- x[i-1] # reject
k <- k+1
}
}
X[,p] = x
xb <- x[-(1:burn)]
reject.rates[p] = k/m
mean.xb[p] = mean(xb)
}
# plot the chain the histogram
par(mfrow=c(2,2))
for(p in 1:4){
x = X[,p]
plot(x,type='l')
abline(h=b,v=burn,lty=3,col='red',lwd=3)
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main='')
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
Table = as.data.frame(rbind(mean.xb,reject.rates))
colnames(Table) <- ws
Table
set.seed(2023)
b <- 0.2 # actual value of beta
m <- 5000 # length of the chain
burn <- 1000 # burn-in time
days <- 250
x <- numeric(m) # the chain
# generate the observed frequencies of winners
i <- sample(1:5,size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win <- tabulate(i)
# the following function prob computes the target density
# (without the constant)
prob <- function(y,win){
if(y < 0 || y >= 0.5)
return(0)
return( (1/3)^win[1] *
((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] *
((2*y)/3)^win[4] * (y/3)^win[5] )
}
u <- runif(m) # for accept/reject step
X = matrix(numeric(4*m),ncol=4)
reject.rates = numeric(4)
mean.xb = numeric(4)
ws = c(0.01,0.05,0.1,0.25)
for(p in 1:4){
set.seed(2023)
w = ws[p]
k <- 0
v <- runif(m,-w,w) # proposal distribution
x[1] <- 0.25
for(i in 2:m){
y <- x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)){ # accept
x[i] <- y}
else{
x[i] <- x[i-1] # reject
k <- k+1
}
}
X[,p] = x
xb <- x[-(1:burn)]
reject.rates[p] = k/m
mean.xb[p] = mean(xb)
}
# plot the chain the histogram
par(mfrow=c(2,2))
for(p in 1:4){
x = X[,p]
plot(x,type='l')
abline(h=b,v=burn,lty=3,col='red',lwd=3)
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main='')
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
Table = as.data.frame(rbind(mean.xb,reject.rates))
colnames(Table) <- ws
rownames(Table) <- c('sample mean ','reject rates ')
Table
par(mfrow=c(2,2))
for(p in 1:4){
x = X[,p]
plot(x,type='l')
abline(h=b,v=burn,lty=3,col='red',lwd=3)
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main='')
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
Table = as.data.frame(rbind(mean.xb,reject.rates))
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main=ws[p])
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
Table = as.data.frame(rbind(mean.xb,reject.rates))
for(p in 1:4){
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main=paste('w=',ws[p])
z <- seq(min(xb),max(xb),length=200)
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main=paste('w=',ws[p]))
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
par(mfrow=c(2,2))
for(p in 1:4){
x = X[,p]
plot(x,type='l',main=paste('w =',ws[p]))
abline(h=b,v=burn,lty=3,col='red',lwd=3)
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main=paste('w =',ws[p]))
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
par(mfrow=c(2,2))
for(p in 1:4){
x = X[,p]
plot(x,type='l',main=paste('w =',ws[p]))
abline(h=b,v=burn,lty=3,col='red',lwd=3)
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,xlab=bquote(beta),ylab='X',main=paste('w =',ws[p]))
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
for(p in 1:4){
x = X[,p]
xb <- x[-(1:burn)]
hist(xb,prob=TRUE,breaks = 'Scott',xlab=bquote(beta),ylab='X',main=paste('w =',ws[p]))
z <- seq(min(xb),max(xb),length=200)
lines(z,dnorm(z,mean(xb),sd(xb)))
}
Table = as.data.frame(rbind(mean.xb,reject.rates))
colnames(Table) <- ws
rownames(Table) <- c('sample mean ','reject rates ')
Table

X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
x <- X[(burn + 1):N,]
plot(x,main='',cex=.5, xlab=bquote(x[1]),ylab=bquote(x[2]))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
x <- X[(burn + 1):N,]
plot(x,main='',cex=.5, xlab=bquote(x[1]),ylab=bquote(x[2]))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
x <- X[(burn + 1):N,]
plot(x,main='',cex=.5, xlab=bquote(x),ylab=bquote(y)
set.seed(2023)
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
x <- X[(burn + 1):N,]
plot(x,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
x <- X[(burn + 1):N,]
plot(x,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,]
x <- Xb[,1]
y <- Xb[,2]
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
plot(x)
plot(y)
plot(x,type='l')
plot(y,type='l')
plot(x,type='l',col='royalblue')
plot(y,type='l',col='pink')
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='green')
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='gold')
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='red')
plot(x,type='l',col='royalblue')
plot(y,type='l',col='pink')
plot(y,type='l',col='wheat')
plot(y,type='l',col='purple')
plot(y,type='l',col='pink')
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='pink')
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='gold')
plot(y,type='l',col='gold')
plot(x,type='l',col='royalblue')
plot(y,type='l',col='gold')
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
plot(x,type='l',col='royalblue')
plot(y,type='l',col='gold')
plot(y,type='l',col='pink')
plot(x,type='l',col='royalblue')
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,]
x <- Xb[,1]
y <- Xb[,2]
par(mfrow=c(3,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
plot(x,type='l',col='royalblue')
plot(y,type='l',col='pink')
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T)
plot(x,type='l',col='royalblue')
hist(x,probability = T)
plot(y,type='l',col='pink')
hist(y,type='l')
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T)
plot(y,type='l',col='royalblue')
hist(y,probability = T)
plot(x,type='l',col='royalblue')
hist(x,probability = T)
plot(y,type='l',col='royalblue')
hist(y,probability = T)
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T)
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue')
hist(y,probability = T)
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
hist(x,probability = T)
plot(y,type='l',col='royalblue')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,] # drop the burn-in time samples
x <- Xb[,1]
y <- Xb[,2]
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T)
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue')
hist(y,probability = T)
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
set.seed(123)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,] # drop the burn-in time samples
x <- Xb[,1]
y <- Xb[,2]
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T)
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue')
hist(y,probability = T)
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
source("D:/大三上学习资料/统计计算/hw10/9.8.R")
y <- Xb[,2]
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='navyblue')
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T)
z <- seq(min(x),max(x),length=1000)
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T,col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T,col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue')
hist(y,probability = T,col='gold')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,] # drop the burn-in time samples
x <- Xb[,1]
y <- Xb[,2]
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='navyblue')
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T,col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue')
hist(y,probability = T,col='gold')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
par(mfrow=c(1,1))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,] # drop the burn-in time samples
x <- Xb[,1]
y <- Xb[,2]
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='navyblue')
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T,breaks='scott',col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue')
hist(y,probability = T,breaks='scott',col='gold')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
par(mfrow=c(1,1))
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T,breaks='scott',col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue')
hist(y,probability = T,breaks='scott',col='gold')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue')
hist(x,probability = T,col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue')
hist(y,probability = T,breaks='scott',col='gold')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,] # drop the burn-in time samples
x <- Xb[,1]
y <- Xb[,2]
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='navyblue')
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue',main='chain of x')
hist(x,probability = T,col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue',main='chain of y')
hist(y,probability = T,breaks='scott',col='gold')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
par(mfrow=c(1,1))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,] # drop the burn-in time samples
x <- Xb[,1]
y <- Xb[,2]
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='navyblue')
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue',main='Chain of x')
hist(x,probability = T,col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue',main='Chain of y')
hist(y,probability = T,breaks='scott',col='gold')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
par(mfrow=c(1,1))
set.seed(2023)
chain <- function(n,a,b,x,y,N){
X <- matrix(0,N,2) # to store the chain
# generate the chain
X[1,] <- c(1,0.5) # initialize the chain
for (i in 2:N){
x2 <- X[i-1,2]
X[i,1] <- rbinom(1,n,y)
# print(y)
x1 <- X[i,1]
X[i,2] <- rbeta(1,shape1=x+a, shape2=n-x+b)
}
return(X)
}
burn <- 1000
N <- 5000 # length of the chain
n <- 20
a <- 10
b <- 10
X <- chain(n,a,b,x=10,y=0.5,N)
Xb <- X[(burn + 1):N,] # drop the burn-in time samples
x <- Xb[,1]
y <- Xb[,2]
par(mfrow=c(1,1))
plot(Xb,main='',cex=.5, xlab=bquote(x),ylab=bquote(y),col='navyblue',main='scatter plot of the joint density f(x,y)')
par(mfrow=c(1,1))
plot(Xb,cex=.5, xlab=bquote(x),ylab=bquote(y),col='navyblue',main='scatter plot of the joint density f(x,y)')
plot(Xb,cex=.5,type = p ,xlab=bquote(x),ylab=bquote(y),col='navyblue',main='scatter plot of the joint density f(x,y)')
plot(Xb,cex=.5,type = 'p' ,xlab=bquote(x),ylab=bquote(y),col='navyblue',main='scatter plot of the joint density f(x,y)')
plot(Xb,cex=.5,type = 'p',ptype=1 ,xlab=bquote(x),ylab=bquote(y),col='navyblue',main='scatter plot of the joint density f(x,y)')
plot(Xb,cex=.5,type = 'p',type=1 ,xlab=bquote(x),ylab=bquote(y),col='navyblue',main='scatter plot of the joint density f(x,y)')
plot(Xb,cex=.5,type = 'p',style=2
,xlab=bquote(x),ylab=bquote(y),col='navyblue',main='scatter plot of the joint density f(x,y)')
par(mfrow=c(1,1))
plot(Xb,cex=.5,type = 'p',xlab=bquote(x),ylab=bquote(y),
col='navyblue',main='scatter plot of the joint density f(x,y)')
par(mfrow=c(2,1))
plot(x,type='l',col='royalblue',main='Chain of x')
hist(x,probability = T,col='gold')
z <- seq(min(x),max(x),length=1000)
lines(z,dnorm(z,mean=mean(x),sd=sd(x)))
plot(y,type='l',col='royalblue',main='Chain of y')
hist(y,probability = T,breaks='scott',col='gold')
z <- seq(min(y),max(y),length=1000)
lines(z,dnorm(z,mean=mean(y),sd=sd(y)))
